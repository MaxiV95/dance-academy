---
interface Props {
	direction: string;
	sucursal: string;
	ref: string;
	src: string;
	lema: string;
}

const { direction, sucursal, ref, src, lema } = Astro.props;
---

<div>
	<p
		class="p-1 shadow-lg flex justify-center font-semibold md:text-sm whitespace-nowrap border-b bg-yellow-300 text-gray-950"
	>
		{lema}
	</p>
	<div class="map-container relative transition-all duration-500">
		<div
			class="map-wrapper map toggle-element absolute md:relative bottom-0 h-[41vh] w-full border-none rounded duration-500"
			data-direction={direction}
			data-src={src}
		>
		</div>
		<p
			class="address toggle-element absolute md:relative bottom-0 p-1 w-full shadow-lg flex flex-col justify-center items-center md:text-lg whitespace-nowrap border-t md:border-t-0 transition-all duration-500"
		>
			<span>üìç Sucursal: {sucursal} - {direction}</span>
			<span>{ref}<span class="inline md:hidden"> (ver mapa)</span></span>
		</p>
	</div>
</div>

<script>
	const mapWrappers = document.querySelectorAll(".map-wrapper");
	mapWrappers.forEach((mapWrapper) => {
		const element = mapWrapper as HTMLElement;
		const direction = element.dataset.direction;
		const src = element.dataset.src;
		const observer = new IntersectionObserver((entries) => {
			if (entries[0].isIntersecting) {
				element.innerHTML = `
					<iframe
						class="h-full w-full border-none rounded duration-500"
						title="Direcci√≥n academia en: ${direction}"
						src="${src}"
						loading="lazy"
						referrerpolicy="no-referrer-when-downgrade"
					></iframe>`;
				observer.disconnect();
			}
		});
		observer.observe(element);
	});
</script>
